
#PYTHON CODE FOR CREATING APPLICATION:
import sys
from phant import Phant
from twilio.rest import TwilioRestClient
from time import sleep
 

account_sid = ""

auth_token  = ""

client = TwilioRestClient(account_sid, auth_token)

p = Phant(public_key='q5JMKnDJKXCMnjbYr0lG', fields=['temp'], private_key='')

while(True):

	data = p.get()

	print("Latest Loudness Value is: {}".format(data[0]['temp']))

	if float(data[0]['temp']) > 1500:
		message = client.messages.create(body="Loudness: {0}\nD313 

Room is making noise, please take action".format(data[0]['temp']),

		    to="+919650055244",    # Replace with your phone number

		    from_="+12018905183") # Replace with your Twilio number
		print (message.sid)
	sleep(15)





#ARDUINO CODE FOR DECIBEL METER AND LCD DISPLAY:

#include <Wire.h>
#include <LiquidCrystal_I2C.h> 
LiquidCrystal_I2C lcd = LiquidCrystal_I2C(0x27, 16, 2);
 
const int sampleWindow = 50;                             
unsigned int sample;
 
#define SENSOR_PIN A0
#define PIN_QUIET 3
#define PIN_MODERATE 4
#define PIN_LOUD 5
 
void setup ()  
{   
  pinMode (SENSOR_PIN, INPUT);  
  pinMode(PIN_QUIET, OUTPUT);
  pinMode(PIN_MODERATE, OUTPUT);
  pinMode(PIN_LOUD, OUTPUT); 
 
  digitalWrite(PIN_QUIET, LOW);
  digitalWrite(PIN_MODERATE, LOW);
  digitalWrite(PIN_LOUD, LOW);
  
  Serial.begin(115200);
  lcd.begin();
 
  
  lcd.backlight();
  lcd.clear();
}      
void loop ()  
{ 
   unsigned long startMillis= millis();                 
   float peakToPeak = 0;                                  
 
   unsigned int signalMax = 0;                         
   unsigned int signalMin = 1024;                    
 
   while (millis() - startMillis < sampleWindow)
   {
      sample = analogRead(SENSOR_PIN);              
      if (sample < 1024)                                 
      {
         if (sample > signalMax)
         {
            signalMax = sample;                       
         }
         else if (sample < signalMin)
         {
            signalMin = sample;                        
         }
      }
   }
 
  peakToPeak = signalMax - signalMin;     
  int db = map(peakToPeak,20,900,49.5,90);
 
  lcd.setCursor(0, 0);
  lcd.print("Loudness: ");
  lcd.print(db);
  lcd.print("dB");
  
  if (db <= 60)
  {
    lcd.setCursor(0, 1);
    lcd.print("Level: Quite");
    digitalWrite(PIN_QUIET, HIGH);
    digitalWrite(PIN_MODERATE, LOW);
    digitalWrite(PIN_LOUD, LOW);
  }
  


 else if (db > 60 && db<85)
  {
    lcd.setCursor(0, 1);
    lcd.print("Level: Moderate");
    digitalWrite(PIN_QUIET, LOW);
    digitalWrite(PIN_MODERATE, HIGH);
    digitalWrite(PIN_LOUD, LOW);
  }
  else if (db>=85)
  {
    lcd.setCursor(0, 1);
    lcd.print("Level: High");
    digitalWrite(PIN_QUIET, LOW);
    digitalWrite(PIN_MODERATE, LOW);
    digitalWrite(PIN_LOUD, HIGH);
 
  }
   
   delay(200); 
   lcd.clear();
}



#HTML CODE FOR WEB PAGE DESIGN

<!DOCTYPE html>
<html>
  <head>
    <!-- EXTERNAL LIBS-->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="https://www.google.com/jsapi"></script>

    <!-- EXAMPLE SCRIPT -->
    <script>

      // onload callback
      function drawChart() {

        var public_key = 'q5JMKnDJKXCMnjbYr0lG';

        // JSONP request
        var jsonData = $.ajax({
          url: 'https://data.sparkfun.com/output/' + public_key + '.json',
          data: {page: 1},
          dataType: 'jsonp',
        }).done(function (results) {

          var data = new google.visualization.DataTable();
          data.addColumn('datetime', 'Time');
          data.addColumn('number', 'Loudness');

          $.each(results.slice(0,80), function (i, row) {
            data.addRow([
              (new Date(row.timestamp)),
              parseFloat(row.temp)            ]);
          });

          var chart = new google.visualization.LineChart($('#chart').get(0));

          chart.draw(data, {
            title: 'SNU Library Noise Level Monitor'
          });

        });

      }

      // load chart lib
      google.load('visualization', '1', {
        packages: ['corechart']
      });

      // call drawChart once google charts is loaded
      google.setOnLoadCallback(drawChart);

    </script>

  </head>
  <body>
    <div id="chart" style="width: 100%;"></div>
  </body>
</html>


